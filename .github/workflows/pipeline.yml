name: Build 

on:
  push:
    branches:
      - master
      - pipeline-setup

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      newVersion: ${{ steps.newVersionEnv.outputs.NEW_VERSION }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update project version
      id: newVersionEnv
      working-directory: ./myapp
      run: |
        version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        newVersion=$(echo $version | awk -F'[.-]' '{if (NF == 3) print $1"."$2"."$3+1; else print $1"."$2"."$3+1"-"$4}')
        echo "NEW_VERSION=$newVersion" >> "$GITHUB_OUTPUT"  # output of the job, not the step
        mvn versions:set -DnewVersion=$newVersion
        echo "Updated version: $newVersion"

    - name: Compile Code and Package Artifact
      working-directory: ./myapp
      run: mvn clean package
  
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: myapp-jar-${{ steps.newVersionEnv.outputs.NEW_VERSION }}
        path: ./myapp/target/myapp-*
    
    - name: Print newVersion value
      run: |
        echo "newVersion is: ${{ steps.newVersionEnv.outputs.NEW_VERSION }}"

  build_and_publish_docker:
    runs-on: ubuntu-latest
    needs: build  # This ensures job2 runs after job1
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Print newVersion value
      run: |
        echo "newVersion is: ${{ needs.build.outputs.newVersion }}"  # Access output from job1

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/myapp:${{ needs.build.outputs.newVersion }} 



        