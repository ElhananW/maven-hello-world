name: Java Maven CI/CD Pipeline

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'myapp/pom.xml'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      newVersion: ${{ steps.newVersionEnv.outputs.NEW_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21 with Maven cache
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Print Java & Maven versions
        run: |
          java -version
          mvn -version 

      - name: Update project version
        id: newVersionEnv
        working-directory: ./myapp
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          newVersion=$(echo $version | awk -F'[.-]' '{if (NF == 3) print $1"."$2"."$3+1; else print $1"."$2"."$3+1"-"$4}')
          echo "NEW_VERSION=$newVersion" >> "$GITHUB_OUTPUT"  
          mvn versions:set -DnewVersion=$newVersion
          echo "Updated version: $newVersion"

      - name: Commit and push updated version
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update version to ${{ steps.newVersionEnv.outputs.NEW_VERSION }}. [skip ci]"
          branch: ${{ github.ref_name }}

      - name: Compile Code and Package Artifact
        working-directory: ./myapp
        run: mvn clean package

      - name: Set JAR path
        run: |
          JAR_PATH=$(find ./myapp/target -name '*.jar' | head -n 1)
          echo "JAR_PATH is: $JAR_PATH"
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp-jar-${{ steps.newVersionEnv.outputs.NEW_VERSION }}
          path: ${{ env.JAR_PATH }}

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21 with Maven cache
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Print Java & Maven versions
        run: |
          java -version
          mvn -version 

      - name: Run Unit Tests
        working-directory: ./myapp
        run: mvn test

  build_and_publish_ecr:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: 
      - build
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #- name: Configure AWS credentials
       # uses: aws-actions/configure-aws-credentials@v2
        #with:
         # role-to-assume: arn:aws:iam::314525640319:role/github-aws
          #aws-region: ${{ secrets.AWS_REGION }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::314525640319:role/github-aws
          aws-region: us-east-1
          audience: sts.amazonaws.com


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: elh/maven
          IMAGE_TAG: ${{ needs.build.outputs.newVersion }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
