name: Java Maven CI/CD Pipeline
on:
  push:
    branches:
      - master
    # Prevent recursive execution as a result of the Git Push step later.
    paths-ignore:
      - 'myapp/pom.xml'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      newVersion: ${{ steps.newVersionEnv.outputs.NEW_VERSION }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Ensure a consistent Java 21 environment with Maven caching for faster builds.
    - name: Set up JDK 21 with Maven cache
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: 'maven'

    - name: Print Java & Maven versions
      run: |
        java -version
        mvn -version 
    
    - name: Update project version
      id: newVersionEnv
      working-directory: ./myapp
      run: |
        version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        newVersion=$(echo $version | awk -F'[.-]' '{if (NF == 3) print $1"."$2"."$3+1; else print $1"."$2"."$3+1"-"$4}')
        echo "NEW_VERSION=$newVersion" >> "$GITHUB_OUTPUT"  
        mvn versions:set -DnewVersion=$newVersion
        echo "Updated version: $newVersion"

    # Commit and push to update the version. Including skip CI for safety.
    - name: Commit and push updated version
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "Update version to ${{ steps.newVersionEnv.outputs.NEW_VERSION }}. [skip ci]"
        branch: ${{ github.ref_name }}

    - name: Compile Code and Package Artifact
      working-directory: ./myapp
      run: mvn clean package

    # Dynamically retrieve JAR path to avoid hardcoded file references.
    - name: Set JAR path
      run: |
        JAR_PATH=$(find ./myapp/target -name '*.jar' | head -n 1)
        echo "JAR_PATH is: $JAR_PATH"
        echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: myapp-jar-${{ steps.newVersionEnv.outputs.NEW_VERSION }}
        path: ${{ env.JAR_PATH }}
  
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Ensure a consistent Java 21 environment with Maven caching for faster builds.
      - name: Set up JDK 21 with Maven cache
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
  
      - name: Print Java & Maven versions
        run: |
          java -version
          mvn -version 
      

      - name: Run Unit Tests
        working-directory: ./myapp
        run: mvn test
  
  build_and_publish_docker:
    runs-on: ubuntu-latest
    needs: 
      - build
      - test  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Sets up QEMU to enable multi-platform builds for Docker images
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3    
    
    # Enables advanced Docker builds with multi-platform support and improved caching
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/myapp:${{ needs.build.outputs.newVersion }} 
        platforms: linux/amd64,linux/arm64

  run_docker_image:
    runs-on: ubuntu-latest
    needs: 
      - build
      - test
      - build_and_publish_docker
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Pull Docker image
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:${{ needs.build.outputs.newVersion }}

    - name: Run Docker container and show logs
      run: |
        docker run --name myapp-container -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/myapp:${{ needs.build.outputs.newVersion }}

  notify_failure:
    runs-on: ubuntu-latest
    if: failure() 
    needs: 
      - build
      - test
      - build_and_publish_docker
      - run_docker_image
    steps:
      - name: Identify Failed Job
        env: 
          GH_TOKEN: ${{ github.token }}  
        run: |
          FAILED_JOB=$(gh api /repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/jobs | jq -r '.jobs[] | select(.conclusion == "failure") | .name')
          echo "FAILED_JOB=$FAILED_JOB" >> $GITHUB_ENV
          echo "The failed job is: $FAILED_JOB"
        
      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}  
          password: ${{ secrets.SMTP_PASSWORD }} 
          subject: "❌ GitHub Actions Failed in ${{ github.repository }} ❌"
          body: |
            The workflow failed in job: ${{ env.FAILED_JOB }}
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: GitHub Actions Bot
